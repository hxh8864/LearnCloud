#需要和github中的配置文件的{application}（{application}看下面注释）相同
#则现在的配置对应github中的文件名是：config-dev.properties
spring:
  application:
    name: config
  #分支
  cloud:
    config:
      label: master
      #与github中的配置文件的{profile}相同
      profile: dev
      #指明配置服务中心地址（即config-server）（不使用注册中心情况下）
      #uri: http://localhost:8007/
      discovery:
        enabled: true #是从配置中心读取文件（使用注册中心情况下）
        service-id: config-server #配置中心的servieId，即服务名（使用注册中心情况下）
server:
  port: 8008

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8009/eureka/


#  Spring Cloud Config 有它的一套访问规则，我们通过这套规则在浏览器上直接访问就可以。
#
#  /{application}/{profile}[/{label}]
#  /{application}-{profile}.yml
#  /{label}/{application}-{profile}.yml
#  /{application}-{profile}.properties
#  /{label}/{application}-{profile}.properties
#  {application} 就是应用名称，对应到配置文件上来，就是配置文件的名称部分，例如我上面创建的配置文件。
#
#  {profile} 就是配置文件的版本，我们的项目有开发版本、测试环境版本、生产环境版本，对应到配置文件上来就是以 application-{profile}.yml 加以区分，例如application-dev.yml、application-sit.yml、application-prod.yml。
#
#  {label} 表示 git 分支，默认是 master 分支，如果项目是以分支做区分也是可以的，那就可以通过不同的 label 来控制访问不同的配置文件了。